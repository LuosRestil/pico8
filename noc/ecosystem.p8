pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
--nature of code ecosystem
--luosrestil

function _init()
	cls(1)
	
	actors={}
	--jellyfish
	for i=1,4 do
		add(actors,jf:new())
	end
	--seaweed
	local sw_y=13*8-4
	for i=0,128,16 do
		add(actors,sw:new(i,sw_y))
	end
	--plankton
	local plnk_y=13*8
	add(actors,plnk:new(64,plnk_y))
	
	msgs={}
end

function _update()
	for i=1,#actors do
		actors[i]:update()
	end
	
	--bubble spawner
	if rnd()<0.01 then
		add(actors,bub:new())
	end
	
	if(btn(⬅️)) c.x-=2
	if(btn(➡️)) c.x+=2
	if(btn(⬆️)) c.y-=2
	if(btn(⬇️)) c.y+=2
end

function _draw()
	cls(1)
	
	for i=1,#actors do
		draw(actors[i])
	end
	
	map(0,0)
	
	for msg in all(msgs) do
		print(msg,8)
	end
end
-->8
--actors

--jellyfish
jf={
	anim_len=2,
	sp_start=80,
	sp_w=1,
	sp_h=1
}
jf.__index=jf

function jf:new()
	local jfi={
		pos=vec:new(
			rnd()*120+5,
			rnd()*100+5
		),
		vel=vec:new(),
		acc=vec:new(),
		max_spd=0.2,
		counter=0,
		anim_spd=rnd()*5+5,
		sp=jf.sp_start,
		tx=rnd()*9999,
		ty=rnd()*9999,
	}
	setmetatable(jfi,jf)
	return jfi
end

function jf:update()
	self.acc.x=0
	self.acc.y=0
	self.acc.x=(rnd()-0.5)/10
	self.acc.y=(rnd()-0.5)/10
	self.vel+=self.acc
	if self.vel:mag() > self.max_spd then
		self.vel:set_mag(self.max_spd)
	end
	self.pos+=self.vel
	if (self.pos.x>128) self.pos.x=-8
	if (self.pos.x<-8) self.pos.x=128
	if (self.pos.y>128) self.pos.y=0
	if (self.pos.y<-8) self.pos.y=128
	animate(self)
end


--seaweed
sw={
	anim_len=2,
	sp_start=5,
	sp_w=2,
	sp_h=2
}
sw.__index=sw

function sw:new(x,y)
	local swi={
		pos=vec:new(x,y),
		counter=0,
		anim_spd=rnd()*5+10,
		sp=sw.sp_start
	}
	setmetatable(swi,sw)
	return swi
end

function sw:update()
	animate(self)
end


--bubble
bub={
	sp=66,
	sp_w=1,
	sp_h=1
}
bub.__index=bub

function bub:new()
	local b={
		pos=vec:new(
			rnd()*120+5,
			14*8
		),
		vel=vec:new(0,map_rng(rnd(),0,1,-0.2,-0.5)),
		acc=vec:new(),
		ty=rnd()*9999,
	}
	setmetatable(b,bub)
	return b
end

function bub:update()
	--switch to oscillation
	--once we learn it
	self.acc.x=map_rng(rnd(),0,1,-0.1,0.1)
	self.vel+=self.acc
	self.vel.x*=0.9
	self.pos+=self.vel
	if (self.pos.y < -8) self.kill()
end

function bub:kill()
	del(actors,self)
end


--plankton
plnk={
	anim_len=2,
	sp_start=1,
	sp_w=2,
	sp_h=1,
	anim_spd=8,
	spd=0.1
}
plnk.__index=plnk

function plnk:new(x,y)
	local plnk_i={
		pos=vec:new(x,y),
		counter=0,
		sp=plnk.sp_start
	}
	setmetatable(plnk_i,plnk)
	return plnk_i
end

function plnk:update()
	animate(self)
	self.pos.x-=self.spd
	if self.pos.x<-16 then self.pos.x=128 end
end


-->8
--vectors
vec={
	__add=function(v1,v2)
		return vec:new(v1.x+v2.x,v1.y+v2.y)
	end,
	__sub=function(v1,v2)
		return vec:new(v1.x-v2.x,v1.y-v2.y)
	end,
	__mul=function(lhs,rhs)
		if type(lhs)=="table" and type(rhs)=="number" then
  	return vec:new(lhs.x*rhs,lhs.y*rhs)
  elseif type(lhs) == "number" and type(rhs) == "table" then
  	return vec:new(rhs.x*lhs,rhs.y*lhs)
  else
  	add(msg,"incompatible types")
  end
	end,
	--dot product
	__pow=function(v1,v2)
		return v1.x*v2.x+v1.y*v2.y
	end,
}
vec.__index=vec

function vec:new(x,y)
	if (x==nil) x=0
	if (y==nil) y=0
	local v={x=x,y=y,isvec=true}
	setmetatable(v,vec)
	return v
end

function vec:add(v)
	self.x+=v.x
	self.y+=v.y
end

function vec:sub(v)
	self.x-=v.x
	self.y-=v.y
end

function vec:mul(s)
	self.x*=s
	self.y*=s
end

function vec:norm()
	self:mul(1/self:mag())
end

function vec:mag()
	return sqrt(self.x*self.x+self.y*self.y)
end

function vec:set_mag(m)
	self:norm()
	self:mul(m)
end

function vec:limit(l)
	if self:mag() > l then
		self:set_mag(l)
	end
end
-->8
-- opensimplex noise

-- usage example
--in _init->os2d_noise(8675309)
--x=map_rng(
--	os2d_eval(tx,0),
--	-1,1,0,127)
--y=map_rng(
--	os2d_eval(ty,0),
--	-1,1,0,127)
--tx+=0.01
--ty+=0.01

-- adapted from public-domain
-- code found here:
-- https://gist.github.com/kdotjpg/b1270127455a94ac5d19

--------------------------------

-- opensimplex noise in java.
-- by kurt spencer
-- 
-- v1.1 (october 5, 2014)
-- - added 2d and 4d implementations.
-- - proper gradient sets for all dimensions, from a
--   dimensionally-generalizable scheme with an actual
--   rhyme and reason behind it.
-- - removed default permutation array in favor of
--   default seed.
-- - changed seed-based constructor to be independent
--   of any particular randomization library, so results
--   will be the same when ported to other languages.

-- (1/sqrt(2+1)-1)/2
local _os2d_str=-0.211324865405187
-- (  sqrt(2+1)-1)/2
local _os2d_squ= 0.366025403784439

-- cache some constant invariant
-- expressions that were 
-- probably getting folded by 
-- kurt's compiler, but not in 
-- the pico-8 lua interpreter.
local _os2d_squ_pl1=_os2d_squ+1
local _os2d_squ_tm2=_os2d_squ*2
local _os2d_squ_tm2_pl1=_os2d_squ_tm2+1
local _os2d_squ_tm2_pl2=_os2d_squ_tm2+2

local _os2d_nrm=47

local _os2d_prm={}

-- gradients for 2d. they 
-- approximate the directions to
-- the vertices of an octagon 
-- from the center
local _os2d_grd = 
{[0]=
	 5, 2,  2, 5,
	-5, 2, -2, 5,
	 5,-2,  2,-5,
	-5,-2, -2,-5,
}

-- initializes generator using a 
-- permutation array generated 
-- from a random seed.
-- note: generates a proper 
-- permutation, rather than 
-- performing n pair swaps on a 
-- base array.
function os2d_noise(seed)
	local src={}
	for i=0,255 do
		src[i]=i
		_os2d_prm[i]=0
	end
	srand(seed)
	for i=255,0,-1 do
		local r=flr(rnd(i+1))
		_os2d_prm[i]=src[r]
		src[r]=src[i]
	end
end

-- 2d opensimplex noise.
function os2d_eval(x,y)
	-- put input coords on grid
	local sto=(x+y)*_os2d_str
	local xs=x+sto
	local ys=y+sto
	
	-- flr to get grid 
	-- coordinates of rhombus
	-- (stretched square) super-
	-- cell origin.
	local xsb=flr(xs)
	local ysb=flr(ys)
	
	-- skew out to get actual 
	-- coords of rhombus origin.
	-- we'll need these later.
	local sqo=(xsb+ysb)*_os2d_squ
	local xb=xsb+sqo
	local yb=ysb+sqo

	-- compute grid coords rel.
	-- to rhombus origin.
	local xins=xs-xsb
	local yins=ys-ysb

	-- sum those together to get
	-- a value that determines 
	-- which region we're in.
	local insum=xins+yins

	-- positions relative to 
	-- origin point.
	local dx0=x-xb
	local dy0=y-yb
	
	-- we'll be defining these 
	-- inside the next block and
	-- using them afterwards.
	local dx_ext,dy_ext,xsv_ext,ysv_ext

	local val=0

	-- contribution (1,0)
	local dx1=dx0-_os2d_squ_pl1
	local dy1=dy0-_os2d_squ
	local at1=2-dx1*dx1-dy1*dy1
	if at1>0 then
		at1*=at1
		local i=band(_os2d_prm[(_os2d_prm[(xsb+1)%256]+ysb)%256],0x0e)
		val+=at1*at1*(_os2d_grd[i]*dx1+_os2d_grd[i+1]*dy1)
	end

	-- contribution (0,1)
	local dx2=dx0-_os2d_squ
	local dy2=dy0-_os2d_squ_pl1
	local at2=2-dx2*dx2-dy2*dy2
	if at2>0 then
		at2*=at2
		local i=band(_os2d_prm[(_os2d_prm[xsb%256]+ysb+1)%256],0x0e)
		val+=at2*at2*(_os2d_grd[i]*dx2+_os2d_grd[i+1]*dy2)
	end
	
	if insum<=1 then
		-- we're inside the triangle
		-- (2-simplex) at (0,0)
		local zins=1-insum
		if zins>xins or zins>yins then
			-- (0,0) is one of the 
			-- closest two triangular
			-- vertices
			if xins>yins then
				xsv_ext=xsb+1
				ysv_ext=ysb-1
				dx_ext=dx0-1
				dy_ext=dy0+1
			else
				xsv_ext=xsb-1
				ysv_ext=ysb+1
				dx_ext=dx0+1
				dy_ext=dy0-1
			end
		else
			-- (1,0) and (0,1) are the
			-- closest two vertices.
			xsv_ext=xsb+1
			ysv_ext=ysb+1
			dx_ext=dx0-_os2d_squ_tm2_pl1
			dy_ext=dy0-_os2d_squ_tm2_pl1
		end
	else  //we're inside the triangle (2-simplex) at (1,1)
		local zins = 2-insum
		if zins<xins or zins<yins then
			-- (0,0) is one of the 
			-- closest two triangular
			-- vertices
			if xins>yins then
				xsv_ext=xsb+2
				ysv_ext=ysb
				dx_ext=dx0-_os2d_squ_tm2_pl2
				dy_ext=dy0-_os2d_squ_tm2
			else
				xsv_ext=xsb
				ysv_ext=ysb+2
				dx_ext=dx0-_os2d_squ_tm2
				dy_ext=dy0-_os2d_squ_tm2_pl2
			end
		else
			-- (1,0) and (0,1) are the
			-- closest two vertices.
			dx_ext=dx0
			dy_ext=dy0
			xsv_ext=xsb
			ysv_ext=ysb
		end
		xsb+=1
		ysb+=1
		dx0=dx0-_os2d_squ_tm2_pl1
		dy0=dy0-_os2d_squ_tm2_pl1
	end
	
	-- contribution (0,0) or (1,1)
	local at0=2-dx0*dx0-dy0*dy0
	if at0>0 then
		at0*=at0
		local i=band(_os2d_prm[(_os2d_prm[xsb%256]+ysb)%256],0x0e)
		val+=at0*at0*(_os2d_grd[i]*dx0+_os2d_grd[i+1]*dy0)
	end
	
	-- extra vertex
	local atx=2-dx_ext*dx_ext-dy_ext*dy_ext
	if atx>0 then
		atx*=atx
		local i=band(_os2d_prm[(_os2d_prm[xsv_ext%256]+ysv_ext)%256],0x0e)
		val+=atx*atx*(_os2d_grd[i]*dx_ext+_os2d_grd[i+1]*dy_ext)
	end
	return val/_os2d_nrm
end

-- note kurt's original code had
-- an extrapolate() function
-- here, which was called in 
-- four places in eval(), but i
-- found inlining it to produce
-- good performance benefits.

-->8

-->8
--util

function animate(act)
	--act={
	--	counter,
	--	anim_spd,
	--	anim_len,
	--	sp_start,
	--	sp,
	--	sp_w,
	--	sp_h
	--}
	act.counter+=1
	if act.counter>act.anim_spd then
		act.counter=0
		act.sp+=act.sp_w
		if act.sp>act.sp_start+(act.anim_len*act.sp_w)-1 then 
			act.sp=act.sp_start 
		end
	end
end

function draw(act)
	spr(act.sp,act.pos.x,act.pos.y,act.sp_w,act.sp_h)
end

function map_rng(val,as,ae,bs,be)
	return (val-as)/(ae-as)*(be-bs)+bs
end
__gfx__
00000000000000000000000000000000000000000000300000000000000030000000000000000000000000000000000000000000000000000000000000000000
000000000e000000e00000e0000000000e0000000003300000000000000030000000000000000000000000000000000000000000000000000000000000000000
00700700000000e00000000000e00e00000000e00003000000000030000030000000003000000000000000000000000000000000000000000000000000000000
00077000000000000000e000000000000000e0000003000000000030000330000000003000000000000000000000000000000000000000000000000000000000
00077000000e0000000000000000e000000000000003000003000030000300000300033000000000000000000000000000000000000000000000000000000000
007007000000000000000e000000000e00e000000003000003000030000300000300030000000000000000000000000000000000000000000000000000000000
000000000e0000e0e000000000000000000000000003000033000030000300003300033000000000000000000000000000000000000000000000000000000000
0000000000000000000000000e00000000000e000003000030000330000330033000003000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000003300033000300000033030000003300000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000330003003300000003033000000300000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000330003003000000033003000003300000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000300003003000000030003300003000000000000000000000000000000000000000000000000000000000
00000000000000003333333333333333333333330000300033003000000330000300003000000000000000000000000000000000000000000000000000000000
00000000000000005335333333335335533335350003300030003300000300003300003000000000000000000000000000000000000000000000000000000000
00000000000000004534553555334554455354340003000030000330000300003000003000000000000000000000000000000000000000000000000000000000
00000000000000004454443444354444444544540003000030000030000300003000003000000000000000000000000000000000000000000000000000000000
00000000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0cc0cc0000c0c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccc9ccc000c9c0000007770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccc9ccc000c9c0000070007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0cc9cc0000c9c0000070077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00c0c000000000000070007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000007770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00666600006666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
06600660066006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66007066660070660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
60000006600000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666666666660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
e000e0e00e0e000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0e0e000ee000e0e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
e000e0e00e0e000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1213141213141213121414121412121300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

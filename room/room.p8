pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
--main
local scenes={}
local scene=""
local hovered_item=nil
local ptr={x=64,y=64}
local ptr_spr={x=0,y=8,dim=3}
local ptr_spr_l={x=3,y=8,dim=5}
local msg=nil
local inv={}
local inv_btn
local inv_open=false
local inv_idx=1
local active_item=nil
--navigation
local nav
local nav_r
local nav_l
local nav_b
--debug stuff
dbg="" --debug message
draw_hitboxes=true

function _init()
	scenes=init_scenes()
	for _,rm in pairs(scenes) do
		for _,item in pairs(rm.items) do
			local lines=split(item.desc,"\n")
			for line in all(lines) do
				assert(#line<26)
			end
		end
	end
	scene="start"
	init_nav()
	init_inv_btn()
	init_test_inv()
end

function _update()
	dbg=nil
	
	--different input handling
	--for inventory
	if inv_open then
		update_inv()
		return
	end
	
	if
		btn(‚û°Ô∏è) or
		btn(‚¨ÖÔ∏è) or
		btn(‚¨ÜÔ∏è) or
		btn(‚¨áÔ∏è) or
		btn(‚ùé)
	then
		msg=nil
	end
	
	if btn(‚û°Ô∏è) then 
		ptr.x=mid(0,127,ptr.x+2)
	end
	if btn(‚¨ÖÔ∏è) then 
		ptr.x=mid(0,127,ptr.x-2)
	end
	if btn(‚¨ÜÔ∏è) then 
		ptr.y=mid(0,127,ptr.y-2)
	end
	if btn(‚¨áÔ∏è) then 
		ptr.y=mid(0,127,ptr.y+2)
	end
	
	hover(scenes[scene])
	
	if 
		btnp(üÖæÔ∏è) and 
		hovered_item~=nil
	then
		hovered_item:activate()
		active_item=nil
	end
end

function _draw()
	--scene
	assert(scenes[scene]~=nil)
	cls(scenes[scene].bg)
	draw_items(scenes[scene])
	--ui
	draw_inv_btn()
	if inv_open then
		draw_inv()
	else
		draw_ptr()
		draw_msg()
	end
	--debugging stuff
	draw_dbg()
--	draw_hovered()
end

function draw_ptr()
	if not empty(nav) then
		draw_nav_ptr()
	elseif active_item~=nil then
		draw_item_ptr()
	else
		draw_normal_ptr()
	end
end

function draw_nav_ptr()
	if nav.r then
		spr(32,ptr.x-7,ptr.y-3)
	elseif nav.l then
		spr(33,ptr.x,ptr.y-3)
	elseif nav.b then
		spr(34,ptr.x-4,ptr.y-7)
	end
end

function draw_item_ptr()
	assert(active_item~=nil)
	spr(
		active_item.sp,
		ptr.x-4,ptr.y-4)
	if hovered_item~=nil then
		draw_hover_bang()
	end
end

function draw_hover_bang()
	line(
		ptr.x+5,ptr.y-5,
		ptr.x+5,ptr.y-3,
		clrs.yellow)
	pset(ptr.x+5,ptr.y-1,
		clrs.yellow)
end

function draw_normal_ptr()
	if hovered_item==nil then
		draw_sm_ptr()
	else
		draw_lg_ptr()
	end
end

function draw_sm_ptr()
	sspr(
		ptr_spr.x,
		ptr_spr.y,
		ptr_spr.dim,
		ptr_spr.dim,
		ptr.x-1,
		ptr.y-1)
end

function draw_lg_ptr()
	sspr(
		ptr_spr_l.x,
		ptr_spr_l.y,
		ptr_spr_l.dim,
		ptr_spr_l.dim,
		ptr.x-2,
		ptr.y-2)
end

--determine whether we're
--hovering over something
function hover(scene)
	hovered_item=nil
	
	--navigation
	nav={}
	if colliding(ptr,nav_r)
	then
		nav.r=true
		hovered_item=nav
	elseif colliding(ptr,nav_l)
	then
		nav.l=true
		hovered_item=nav
	elseif colliding(ptr,nav_b)
	then
		nav.b=true
		hovered_item=nav
	end
	
	for k,v in pairs(scene.items) 
	do
		if colliding(ptr,v) then
			hovered_item=v
		end
	end
	
	if colliding(ptr,inv_btn) do
		hovered_item=inv_btn
	end
end

function colliding(ptr,item)
	return ptr.x>=item.x and
		ptr.x<=item.x+item.w and
		ptr.y>=item.y and
		ptr.y<=item.y+item.h
end

function draw_msg()
	if msg==nil then return end
	local lines=split(msg,"\n")
	local longest=0
	for l in all(lines) do
		if #l>longest then
			longest=#l
		end
	end
	
	local w=(longest)*4
	local h=#lines*6
	local padx=(128-w)/2
	local pady=(128-h)/2
	--background
	rectfill(
		padx,pady,
		padx+w,pady+h,
		clrs.blue)
	--border
	rect(
		padx-1,pady-1,
		padx+w+1,pady+h+1,
		clrs.white)
	--text
	print(
		msg,
		padx+1,pady+1,
		clrs.black)
end

function draw_dbg()
	if dbg==nil then return end
	print(dbg,0,0,clrs.orange)
end

function draw_hovered()
	if hovered_item==nil then
		return
	end
	print(
		hovered_item.name,
		0,6,
		clrs.yellow)
end

function init_nav()
	nav={}
	nav_r={
		x=120,y=8,w=8,h=128-16,
		activate=function()
			if scenes[scene].right then
				scene=scenes[scene].right
			end
		end}
	nav_l={
		x=0,y=8,w=8,h=128-16,
		activate=function()
			if scenes[scene].left then
				scene=scenes[scene].left
			end
		end}
	nav_b={
		x=8,y=120,w=128-16,h=8,
		activate=function()
			if scenes[scene].back then
				scene=scenes[scene].back
			end
		end}
end

-->8
--scenes
function init_scenes()
	return {
		start=init_scene_start(),
		right=init_scene_right(),
		left=init_scene_left(),
		inner=init_scene_inner()
	}
end

function init_scene_start()
	return {
		bg=clrs.purple,
		left="left",
		right="right",
		back=nil,
		items={
			test={
				name="test item",
				x=20,y=20,
				w=20,h=20,
				desc=[[a profoundly 
uninteresting
test item.]],
				draw=function(self) end,
				activate=function(self) 
					msg=self.desc
				end	
			},
			test2={
				name="boogie",
				x=81,y=4,
				w=5,h=7,
				desc=[[sometimes you just
gotta boogie]],
				draw=function(self) end,
				activate=function(self)
					msg=self.desc
				end
			}
		}
	}
end

function init_scene_right()
	return {
		bg=clrs.red,
		left="start",
		items={}
	}
end

function init_scene_left()
	return {
		bg=clrs.yellow,
		right="start",
		items={}
	}
end

function init_scene_inner()
	return {
		bg=clrs.brown,
		back="start",
		items={}
	}
end

function draw_items(scene)
	for k,v in pairs(scene.items) 
	do
		v:draw()
		if draw_hitboxes then
			draw_hitbox(v)
		end
	end
end

function draw_hitbox(item)
	rect(
		item.x,item.y,
		item.x+item.w,item.y+item.h,
		clrs.red)
end
-->8
--clrs
clrs={
	black=0,
	navy=1,
	purple=2,
	green=3,
	brown=4,
	charcoal=5,
	grey=6,
	white=7,
	red=8,
	orange=9,
	yellow=10,
	lime=11,
	blue=12,
	lavender=13,
	pink=14,
	peach=15
}
-->8
--inventory
local w=110
local h=19
local x=7
local by=8 --y of boxes

function update_inv()
	if btnp(‚û°Ô∏è) and inv_idx<10 then 
		inv_idx+=1
	elseif btnp(‚¨ÖÔ∏è) and inv_idx>1 then 
		inv_idx-=1
	elseif btnp(‚¨ÜÔ∏è) and inv_idx>5 then 
		inv_idx-=5
	elseif btnp(‚¨áÔ∏è) and inv_idx<6 then 
		inv_idx+=5
	elseif btnp(üÖæÔ∏è) then
		active_item=inv[inv_idx]
		inv_open=false
		set_ptr_from_inv()
	elseif btnp(‚ùé) then
		inv_open=false
		set_ptr_from_inv()
		active_item=nil
	end
end

function set_ptr_from_inv()
	ptr.x=x+(inv_idx-1)*11+6
	ptr.y=by+6
end

function draw_inv()
	--bg
	rectfill(
		x,0,x+w,h,clrs.black)
	--border
	rect(x,0,x+w,h,clrs.white)
	--boxes
	for i=0,9 do
		local bx=x+i*11
		rect(
			bx,by,bx+11,by+11,
			clrs.white)
	end
	--header
	print(
		"inventory",x+2,2,clrs.white)
	--items
	for i,item in ipairs(inv) do
		local ix=x+(i-1)*11+2
		spr(item.sp,ix,by+2)
	end
	--highlight
	local hx=x+(inv_idx-1)*11
	rect(hx,by,hx+11,by+11,
		clrs.orange)
		
	--item detail window
	local item=inv[inv_idx]
	if item==nil then return end
	local desc_lines=
		#split(item.desc,"\n")
	local idh= --item detail hght
		(desc_lines+1)*5+
		desc_lines+5
	local idy=by+11
	--bg
	rectfill(
		x,idy,x+w,idy+idh,clrs.black)
	--border
	rect(
		x,idy,x+w,idy+idh,clrs.white)
	--name
	print(item.name,x+2,idy+2,
		clrs.white)
	--desc
	print(item.desc,x+2,idy+10,
		clrs.white)
	--highlight again...
	rect(hx,by,hx+11,by+11,
		clrs.orange)
end

function init_inv_btn()
	inv_btn={
		name="inventory button",
		x=119,y=0,
		w=8,h=8,
		draw=function(self)
			if hovered_item==self then
				rectfill(
					self.x,
					self.y,
					self.x+self.w,
					self.y+self.h,
					clrs.white)
			end
			rect(
				self.x,
				self.y,
				self.x+self.w,
				self.y+self.h,
				clrs.navy)
			print("i",
				self.x+3,self.y+2,
				clrs.navy)
		end,
		activate=function(self) 
			inv_open=true
			hovered_item=nil
		end	
	}
end

function draw_inv_btn()
	inv_btn:draw()
end

function init_test_inv()
	inv={
		{
			name="flower",
			desc=[[it's a flower.
smells nice.]],
			sp=1,
		},
		{
			name="tea",
			desc=[[smells of bitter
almonds.]],
			sp=2,
		},
		{
			name="screwdriver",
			desc=[[equally useful for
screwdriving and 
screw-un-driving.]],
			sp=3,
		},
		{
			name="soy burger",
			desc=[[no animals were
harmed in the making
of this game.]],
			sp=4,
		},
		{
			name="light bulb",
			desc=[[in case you have
a bright idea.]],
			sp=17,
		},
		{
			name="rabbit",
			desc=[[can pull a magician
out of its hat.]],
			sp=18,
		},
		{
			name="toy car",
			desc=[[vroom, vroom.]],
			sp=19,
		},
		{
			name="hat",
			desc=[[keeps the sun
out of your eyes.]],
			sp=20,
		},
	}
end
-->8
--util
function txt_w(txt)
	return #txt*3+#txt-1
end

function empty(table)
	for _ in pairs(table) do
		return false
	end
	return true
end
__gfx__
00000000007000000777700060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000007a700007444477066000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007000073300077777707066000000f9ff9f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0007700000003000767777070069a000fff9ffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000ccc007677770700999a00bbbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007000000c00076777770000499a0444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000ccc007777770000004999ffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000ccccc007777000000004900ffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
06000600007777000000007700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
606006000777a7700077700700888600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0606606607777a700000777708888660000ccc700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000060007777770077771718888888800ccccc70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000060000777700777777e72888888f00ccccc70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000770007777777722228888cccccccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000660006777777005500550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000660000677777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
67000000000000760666666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66770000000077660166666700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66667700007766660016667000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666666666660016667000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66661100001166660001670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66110000000011660001670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
61000000000000160000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
80000008b000000b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
080000800b0000b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0080080000b00b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00088000000bb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00088000000bb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0080080000b00b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
080000800b0000b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
80000008b000000b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
3000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
